#!/usr/bin/env python

# Copyright (c) 2012 NTT DOCOMO, INC.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

import getopt
import os
import sys

POSSIBLE_TOPDIR = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(POSSIBLE_TOPDIR, 'nova', '__init__.py')):
    sys.path.insert(0, POSSIBLE_TOPDIR)

from nova import context
from nova import flags
from nova.openstack.common import log as logging
from nova import utils
from nova.virt.baremetal import bmdb

FLAGS = flags.FLAGS


def main():
    usage = """
usage:
            --service_host=<compute service's hostname>
            --cpus=<cpu count>
            --memory_mb=<memory size in MB>
            --local_gb=<disk size in GB>
            --pm_address=<power manager address>
            --pm_user=<power manager username>
            --pm_password=<power manager password>
            --terminal_port=<TCP port for terminal access>
            --prov_mac_address=<xx:xx:xx:xx:xx:xx>
            --prov_vlan_id=<VLAN ID> (optional)
            """
    opts, args = getopt.getopt(
        sys.argv[1:],
        "",
        ['flagfile=',
         'service_host=',
         'cpus=',
         'memory_mb=',
         'local_gb=',
         'pm_address=',
         'pm_user=',
         'pm_password=',
         'prov_mac_address=',
         'prov_vlan_id=',
         'terminal_port=',
        ])

    values = {
        'service_host': None,
        'cpus': None,
        'memory_mb': None,
        'local_gb': None,
        'pm_address': None,
        'pm_user': None,
        'pm_password': None,
        'prov_mac_address': None,
        'prov_vlan_id': None,
        'registration_status': 'done',
        'task_state': None,
        'terminal_port': None,
    }
    flagfile = None

    for o, a in opts:
        if o == '--service_host':
            values['service_host'] = a
        elif o == '--cpus':
            values['cpus'] = a
        elif o == '--memory_mb':
            values['memory_mb'] = a
        elif o == '--local_gb':
            values['local_gb'] = a
        elif o == '--pm_address':
            values['pm_address'] = a
        elif o == '--pm_user':
            values['pm_user'] = a
        elif o == '--pm_password':
            values['pm_password'] = a
        elif o == '--prov_mac_address':
            values['prov_mac_address'] = a
        elif o == '--prov_vlan_id':
            values['prov_vlan_id'] = a
        elif o == '--terminal_port':
            values['terminal_port'] = a
        elif o == '--flagfile':
            flagfile = [a]
        else:
            print "unrecognized option '%s'" % o
            print usage
            sys.exit(1)

    print values

    args = flags.parse_args(args, default_config_files=flagfile)

    ok = True

    for k, v in values.items():
        if v is None and k != 'task_state' and k != 'prov_vlan_id':
            print "'%s' is not specified" % k
            ok = False

    if not ok:
        print usage
        sys.exit(1)

    ctx = context.get_admin_context()
    r = bmdb.bm_node_create(ctx, values)
    print r.id

if __name__ == "__main__":
    main()
